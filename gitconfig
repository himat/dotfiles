[include]
    path = ~/.gitconfig.private
[includeIf "gitdir:~/dotfiles/"]
    path = ~/.gitconfig.personal

[core]
    excludesfile = ~/.gitignore_global
    editor = vim

[alias]
    aliases = config --get-regexp alias
    st = status
    s = status -s # Short status

    a = add
    aa = add --all

    di = diff
    dis = diff --staged
    distat = diff --stat # --stat shows stats on lines changed per file in diff
    disstat = diff --staged --stat

    # Shows the diff from before the latest pull/commit/reflog change and now
    #   Can also do things like master@{10 minutes ago} and such
    difflatestpull = diff master@{1} master

    show-names = show --name-status # Only show files changed in the latest commit instead of all the diffs too

    pl = pull
    ps = push
    psh = push
    shinratensei = push # The almighty
    banshotenin = pull # The universal

    ci = commit
    cia = commit --amend
    cim = commit -m
    co = checkout
    cob = checkout -b # Creates new local branch
    cobb = checkout - # Switches to previous branch
    com = checkout master # Switch to master
    b = branch
    bd = branch -d
    br = branch
    ba = branch -av
    bra = branch -av

    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    logdiffs = log -p
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all --date=local
    tree = log --graph --decorate --pretty=format:\"%C(yellow)%h %Cred%cr %Cblue(%an)%C(cyan)%d%Creset %s\" --abbrev-commit --all
    root = rev-parse --show-toplevel # Return repo's root dir, useful for shell prompts

    # Run this when you have a branch that was forked off another branch, and that original branch was squash merged into master. https://stackoverflow.com/a/70994400/1807163
    #   Ex. `git rebase-onto feature-b-off-a feature-a` where feature-a is the branch that was squash merged into master
	rebase-onto = "!f() { git rebase --onto master $(git merge-base \"$1\" \"$2\") \"$1\"; }; f"

[diff]
    # Automatically detect renames/moves of files in git diffs, so that it
    #   doesn't show the full text of the diff as long as the similarity
    #   between the files in a detected add/delete pair is at least 50%.
    #   Will just show the actual changes between the files.
    renames = true

    # Shows removed whitespace in diffs
    wsErrorHighlight = all
[diff "jupyternotebook"]
    # Ignores diffing the outputs of cells since it makes doing a 'git diff' 
    #   very long (multiple minutes) if there are a lot of outputs
	command = git-nbdiffdriver diff --ignore-outputs
[merge "jupyternotebook"]
	driver = git-nbmergedriver merge %O %A %B %L %P
	name = jupyter notebook merge driver
[difftool "nbdime"]
	cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\" \"$BASE\"
[difftool]
	prompt = false
[mergetool "nbdime"]
	cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[mergetool]
	prompt = false
[pager]
	branch = false
[pull]
	rebase = true
[init]
	defaultBranch = master
